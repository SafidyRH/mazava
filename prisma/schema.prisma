// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String? // Ajoutez ces champs
  lastName  String? // pour les profils utilisateurs
  phone     String?
  bio       String?
  skills    String[] // Compétences (pour les candidatures)
  resumeUrl String? // CV par défaut

  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  isEmailConfirmed         Boolean   @default(false)
  emailConfirmedAt         DateTime?
  confirmationToken        String?
  confirmationTokenExpires DateTime?

  employments  Employment[]
  reviews      Review[]
  applications JobApplication[] // Nouvelle relation
}

model Company {
  id           String  @id @default(uuid())
  name         String
  description  String?
  industry     String?
  sizeRange    String?
  website      String?
  location     String?
  headquarters String?
  logo         String?

  // Ajoutez ces champs pour les statistiques
  averageRating Float @default(0)
  reviewCount   Int   @default(0)
  jobCount      Int   @default(0)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isVerified Boolean   @default(false)
  verifiedAt DateTime?

  employments Employment[]
  reviews     Review[]
  jobs        Job[] // Nouvelle relation

  @@map("companies")
}

model Employment {
  id         String    @id @default(uuid())
  userId     String
  companyId  String
  jobTitle   String
  startDate  DateTime
  endDate    DateTime?
  isCurrent  Boolean   @default(false)
  department String?
  location   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  company    Company   @relation(fields: [companyId], references: [id])
  reviews    Review[]

  @@map("employments")
}

model Review {
  id               String     @id @default(uuid())
  userId           String
  companyId        String
  employmentId     String
  ratingOverall    Float
  ratingWorkLife   Float
  ratingSalary     Float
  ratingCulture    Float
  ratingManagement Float
  pros             String
  cons             String
  adviceManagement String?
  isAnonymous      Boolean    @default(true)
  isVerified       Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  moderatedAt      DateTime?
  status           String     @default("pending")
  user             User       @relation(fields: [userId], references: [id])
  company          Company    @relation(fields: [companyId], references: [id])
  employment       Employment @relation(fields: [employmentId], references: [id])

  @@map("reviews")
}

model Job {
  id           String  @id @default(uuid())
  title        String
  description  String
  requirements String? // Compétences requises
  location     String
  contractType String // CDI, CDD, Stage, Freelance
  workMode     String? // Remote, Hybrid, On-site
  salaryMin    Float?
  salaryMax    Float?
  currency     String  @default("EUR")
  experience   String? // Junior, Senior, etc.

  isActive Boolean @default(true)
  isUrgent Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  // Relations
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  applications JobApplication[]

  @@map("jobs")
}

model JobApplication {
  id          String            @id @default(uuid())
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  resumeUrl   String?
  notes       String? // Notes internes de l'entreprise

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reviewedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId  String

  @@unique([userId, jobId]) // Un utilisateur ne peut postuler qu'une fois par offre
  @@map("job_applications")
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  ACCEPTED
  REJECTED
  WITHDRAWN
}
