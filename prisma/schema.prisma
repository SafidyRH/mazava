// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  email             String       @unique
  password          String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isEmailConfirmed  Boolean      @default(false)
  emailConfirmedAt  DateTime?
  confirmationToken String?
  employments       Employment[] // Relation inverse avec Employment
  reviews           Review[] // Relation inverse avec Review
}

model Company {
  id           String       @id @default(uuid())
  name         String
  description  String?
  industry     String?
  sizeRange    String?
  website      String?
  location     String?
  headquarters String?
  logo         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isVerified   Boolean      @default(false)
  verifiedAt   DateTime?
  employments  Employment[]
  reviews      Review[]

  @@map("companies")
}

model Employment {
  id         String    @id @default(uuid())
  userId     String
  companyId  String
  jobTitle   String
  startDate  DateTime
  endDate    DateTime?
  isCurrent  Boolean   @default(false)
  department String?
  location   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  company    Company   @relation(fields: [companyId], references: [id])
  reviews    Review[]

  @@map("employments")
}

model Review {
  id               String     @id @default(uuid())
  userId           String
  companyId        String
  employmentId     String
  ratingOverall    Float
  ratingWorkLife   Float
  ratingSalary     Float
  ratingCulture    Float
  ratingManagement Float
  pros             String
  cons             String
  adviceManagement String?
  isAnonymous      Boolean    @default(true)
  isVerified       Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  moderatedAt      DateTime?
  status           String     @default("pending")
  user             User       @relation(fields: [userId], references: [id])
  company          Company    @relation(fields: [companyId], references: [id])
  employment       Employment @relation(fields: [employmentId], references: [id])

  @@map("reviews")
}
